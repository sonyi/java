
循序渐进Socket网络编程（多客户端、信息共享、文件传输）

1、TCP/IP协议
　　	既然是网络编程，涉及几个系统之间的交互，那么首先要考虑的是如何准确的定位到网络上的一台或
	几台主机,另一个是如何进行可靠高效的数据传输。这里就要使用到TCP/IP协议。TCP/IP协议（传输控制协议）
	由网络层的IP协议和传输层的TCP协议组成。IP层负责网络主机的定位，数据传输的路由，由IP地址可以唯一
	的确定Internet上的一台主机。TCP层负责面向应用的可靠的或非可靠的数据传输机制，这是网络编程的主要对象。

2、TCP与UDP
　　	TCP是一种面向连接的保证可靠传输的协议。通过TCP协议传输，得到的是一个顺序的无差错的数据流。
	发送方和接收方的成对的两个socket之间必须建立连接，以便在TCP协议的基础上进行通信，当一个socket
	（通常都是server socket）等待建立连接时，另一个socket可以要求进行连接，一旦这两个socket连接起
	来，它们就可以进行双向数据传输，双方都可以进行发送或接收操作。

　　	UDP是一种面向无连接的协议，每个数据报都是一个独立的信息，包括完整的源地址或目的地址，它在
	网络上以任何可能的路径传往目的地，因此能否到达目的地，到达目的地的时间以及内容的正确性都是不能
	被保证的。

3、TCP与UDP区别：
	TCP特点：
		1、TCP是面向连接的协议，通过三次握手建立连接，通讯完成时要拆除连接，由于TCP是面向连接协议，
			所以只能用于点对点的通讯。而且建立连接也需要消耗时间和开销。
		2、TCP传输数据无大小限制，进行大数据传输。
		3、TCP是一个可靠的协议，它能保证接收方能够完整正确地接收到发送方发送的全部数据。
		
　　UDP特点：
		1、UDP是面向无连接的通讯协议，UDP数据包括目的端口号和源端口号信息，由于通讯不需要连接，
			所以可以实现广播发送。
		2、UDP传输数据时有大小限制，每个被传输的数据报必须限定在64KB之内。
		3、UDP是一个不可靠的协议，发送方所发送的数据报并不一定以相同的次序到达接收方。
		
　　TCP与UDP应用：
		TCP在网络通信上有极强的生命力，例如远程连接（Telnet）和文件传输（FTP）都需要不定长度的数据
			被可靠地传输。但是可靠的传输是要付出代价的，对数据内容正确性的检验必然占用计算机的处理
			时间和网络的带宽，因此TCP传输的效率不如UDP高。
		UDP操作简单，而且仅需要较少的监护，因此通常用于局域网高可靠性的分散系统中client/server应用
			程序。例如视频会议系统，并不要求音频视频数据绝对的正确，只要保证连贯性就可以了，这种情
			况下显然使用UDP会更合理一些。
			
4、Socket是什么
	1、Socket通常也称作"套接字"，用于描述IP地址和端口，是一个通信链的句柄。网络上的两个程序通过一个
		双向的通讯连接实现数据的交换，这个双向链路的一端称为一个Socket，一个Socket由一个IP地址和一
		个端口号唯一确定。应用程序通常通过"套接字"向网络发出请求或者应答网络请求。 Socket是TCP/IP协
		议的一个十分流行的编程界面，但是，Socket所支持的协议种类也不光TCP/IP一种，因此两者之间是没
		有必然联系的。在Java环境下，Socket编程主要是指基于TCP/IP协议的网络编程。
　　2、Socket通讯过程：服务端监听某个端口是否有连接请求，客户端向服务端发送连接请求，服务端收到连
		接请求向客户端发出接收消息，这样一个连接就建立起来了。客户端和服务端都可以相互发送消息与对
		方进行通讯。

　　3、Socket的基本工作过程包含以下四个步骤：
		(1)创建Socket；
		(2)打开连接到Socket的输入输出流；
		(3)按照一定的协议对Socket进行读写操作；
		(4)关闭Socket。
		
5、Java中的Socket
　　	在java.net包下有两个类：Socket和ServerSocket。ServerSocket用于服务器端，Socket是建立网络
	连接时使用的。在连接成功时，应用程序两端都会产生一个Socket实例，操作这个实例，完成所需的会话。
	对于一个网络连接来说，套接字是平等的，并没有差别，不因为在服务器端或在客户端而产生不同级别。
	不管是Socket还是ServerSocket它们的工作都是通过SocketImpl类及其子类完成的。

　　列出几个常用的构造方法：
			//创建一个流套接字并将其连接到指定 IP 地址的指定端口号
		Socket(InetAddress address, int port);
			//创建一个流套接字并将其连接到指定主机上的指定端口号
		Socket(String host, int port);
			//创建一个套接字并将其连接到指定远程地址上的指定远程端口
		Socket(InetAddress address, int port, InetAddress localAddr, int localPort);
			//创建一个套接字并将其连接到指定远程主机上的指定远程端口
		Socket(String host, int port, InetAddress localAddr, int localPort);
			//使用用户指定的 SocketImpl 创建一个未连接 Socket
		Socket(SocketImpl impl);

			//创建绑定到特定端口的服务器套接字
		ServerSocket(int port);
			//利用指定的 backlog 创建服务器套接字并将其绑定到指定的本地端口号
		ServerSocket(int port, int backlog);
			//使用指定的端口、侦听 backlog 和要绑定到的本地 IP地址创建服务器
		ServerSocket(int port, int backlog, InetAddress bindAddr);
		
		构造方法的参数中，address、host和port分别是双向连接中另一方的IP地址、主机名和端 口号，
			stream指明socket是流socket还是数据报socket，localPort表示本地主机的端口号，localAddr
			和bindAddr是本地机器的地址（ServerSocket的主机地址），impl是socket的父类，既可以用来
			创建serverSocket又可以用来创建Socket。count则表示服务端所能支持的最大连接数。

　　注意：必须小心选择端口号。每一个端口提供一种特定的服务，只有给出正确的端口，才能获得相应的服务。
		0~1023的端口号为系统所保留，例如http服务的端口号为80,telnet服务的端口号为21,ftp服务的端口
		号为23, 所以我们在选择端口号时，最好选择一个大于1023的数以防止发生冲突。

　　几个重要的Socke方法：
			//方法获得网络连接输入，同时返回一个IutputStream对象实例
		public InputStream getInputStream();
			//方法连接的另一端将得到输入，同时返回一个OutputStream对象实例
		public OutputStream getOutputStream();
			//用于产生"阻塞"，直到接受到一个连接，并且返回一个客户端的Socket对象实例。
		public Socket accept();
		
　　		"阻塞"是一个术语，它使程序运行暂时"停留"在这个地方，直到一个会话产生，然后程序继续；
		通常"阻塞"是由循环产生的。

　　注意：其中getInputStream和getOutputStream方法均会产生一个IOException，它必须被捕获，因为它们
		返回的流对象，通常都会被另一个流对象使用。
		
